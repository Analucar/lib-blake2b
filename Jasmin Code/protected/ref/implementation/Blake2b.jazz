/*-----INIT-----*/

/* Init IV -> Array of 8 u64 */ /* NÃO APARENTA PROBLEMA */
inline fn init_iv() -> stack u64[8] {
	stack u64[8] iv;
	reg u64 t;

	t = 0x6a09e667f3bcc908;
	iv[0] = t;

	t = 0xbb67ae8584caa73b;
	iv[1] = t;

	t = 0x3c6ef372fe94f82b;
	iv[2] = t;

	t = 0xa54ff53a5f1d36f1;
	iv[3] = t;

	t = 0x510e527fade682d1;
	iv[4] = t;

	t = 0x9b05688c2b3e6c1f; 
	iv[5] = t;

	t = 0x1f83d9abfb41bd6b; 
	iv[6] = t;

	t = 0x5be0cd19137e2179;
	iv[7] = t;

	return iv;
}
/*-----INIT-----*/



/*-----UPDATE-----*/ /* NÃO APARENTAR PROBLEMA */
inline fn array_v(stack u64[8] h, stack u64[2] t, inline int last) -> stack u64[16] {
	stack u64[16] v; 
	stack u64[8] iv;
	
	reg u64 h_i iv_i v_12 v_13 t0 t1;
	
	inline int i;

	iv = init_iv(); //Get IV

	for i = 0 to 8 { // fill first 8 positions [0 .. 7] of array v with array h
		h_i = h[i];
		v[i] = h_i;
	}

	for i = 8 to 16 { // fill last 8 positions [8 .. 15] of array v with array iv
		iv_i = iv[i-8];
		v[i] = iv_i;
	}

	v_12 = v[12] ; t0 = t[0] ; v_12 ^= t0; // v_12 = v[12] ^ t[0] <==> v[12] = 0x 510e527fade682d1 ^ 0x 0 <==> v[12] = 0x 510e527fade682d1
	v_13 = v[13] ; t1 = t[1] ; v_13 ^= t1; // v_13 = v[13] ^ t[1] <==> v[13] = 0x 9b05688c2b3e6c1f ^ 0x 0 <==> v[13] = 0x 9b05688c2b3e6c1f
	
	 
	v[12] = v_12; v[13] = v_13; // v[12] ^= t[0] ; v[13] ^= t[1]
	

	if(last == 1) {
		v[14] ^= 0xFFFFFFFFFFFFFFFF;
	}
	return v;
}

/*-----UPDATE-----*/


/*-----BLAKE FUNCTIONS-----*/

/* Rotate Right */
inline fn ROTR64(reg u64 x, inline int y) -> reg u64{
	reg u64 r;

	r = #ROR(x,y);

	return r;
}

/* Mix Function  */ /* NÃO APARENTA PROBLEMA */
inline fn G(stack u64[16] v, inline int a b c d , reg u64 x y) -> stack u64[16] {
	reg u64 v_a, v_b, v_c, v_d;
	
	v_b = v[b];
	v[a]+= v_b; v[a]+= x;

	v_a = v[a]; v_d = v[d];
	v[d] = ROTR64(v_d ^ v_a, 32);

	v_d = v[d];
	v[c] += v_d;

	v_b = v[b]; v_c = v[c];
	v[b] = ROTR64(v_b ^ v_c, 24);


	v_b = v[b];
	v[a]+= v_b; v[a]+= y;

	v_a = v[a]; v_d = v[d];
	v[d] = ROTR64(v_d ^ v_a, 16);

	v_d = v[d];
	v[c] += v_d;

	v_b = v[b]; v_c = v[c];
	v[b] = ROTR64(v_b ^ v_c, 63);

	return v;
}



inline fn compressMix(stack u64[16] buffer , stack u64[16]v ) -> stack u64[16] {
	/* i = 0 */ 
	v = G(v, 0, 4,  8, 12, buffer[0], buffer[1]); v = G(v, 1, 5,  9, 13, buffer[2], buffer[3]); v = G(v, 2, 6, 10, 14, buffer[4], buffer[5]); v = G(v, 3, 7, 11, 15, buffer[6], buffer[7]); v = G(v, 0, 5, 10, 15, buffer[8], buffer[9]); v = G(v, 1, 6, 11, 12, buffer[10], buffer[11]); v = G(v, 2, 7,  8, 13, buffer[12], buffer[13]);	v = G(v, 3, 4,  9, 14, buffer[14], buffer[15]);
		
	/* i = 1 */	 
	v = G(v, 0, 4,  8, 12, buffer[14], buffer[10]);v = G(v, 1, 5,  9, 13, buffer[4], buffer[8]);v = G(v, 2, 6, 10, 14, buffer[9], buffer[15]);v = G(v, 3, 7, 11, 15, buffer[13], buffer[6]);v = G(v, 0, 5, 10, 15, buffer[1], buffer[12]);v = G(v, 1, 6, 11, 12, buffer[0], buffer[2]);v = G(v, 2, 7,  8, 13, buffer[11], buffer[7]);v = G(v, 3, 4,  9, 14, buffer[5], buffer[3]);

	/* i = 2 */	 
	v = G(v, 0, 4,  8, 12, buffer[11], buffer[8]);v = G(v, 1, 5,  9, 13, buffer[12], buffer[0]);v = G(v, 2, 6, 10, 14, buffer[5], buffer[2]);v = G(v, 3, 7, 11, 15, buffer[15], buffer[13]);v = G(v, 0, 5, 10, 15, buffer[10], buffer[14]);v = G(v, 1, 6, 11, 12, buffer[3], buffer[6]);v = G(v, 2, 7,  8, 13, buffer[7], buffer[1]);v = G(v, 3, 4,  9, 14, buffer[9], buffer[4]);

	/* i = 3 */	 
	v = G(v, 0, 4,  8, 12, buffer[7], buffer[9]);v = G(v, 1, 5,  9, 13, buffer[3], buffer[1]);v = G(v, 2, 6, 10, 14, buffer[13], buffer[12]);v = G(v, 3, 7, 11, 15, buffer[11], buffer[14]);v = G(v, 0, 5, 10, 15, buffer[2], buffer[6]);v = G(v, 1, 6, 11, 12, buffer[5], buffer[10]);v = G(v, 2, 7,  8, 13, buffer[4], buffer[0]);v = G(v, 3, 4,  9, 14, buffer[15], buffer[8]);

	/* i = 4 */	 
	v = G(v, 0, 4,  8, 12, buffer[9], buffer[0]);v = G(v, 1, 5,  9, 13, buffer[5], buffer[7]);v = G(v, 2, 6, 10, 14, buffer[2], buffer[4]);v = G(v, 3, 7, 11, 15, buffer[10], buffer[15]);v = G(v, 0, 5, 10, 15, buffer[14], buffer[1]);v = G(v, 1, 6, 11, 12, buffer[11], buffer[12]);v = G(v, 2, 7,  8, 13, buffer[6], buffer[8]);v = G(v, 3, 4,  9, 14, buffer[3], buffer[13]);

	/* i = 5 */	 
	v = G(v, 0, 4,  8, 12, buffer[2], buffer[12]);v = G(v, 1, 5,  9, 13, buffer[6], buffer[10]);v = G(v, 2, 6, 10, 14, buffer[0], buffer[11]);v = G(v, 3, 7, 11, 15, buffer[8], buffer[3]);v = G(v, 0, 5, 10, 15, buffer[4], buffer[13]);v = G(v, 1, 6, 11, 12, buffer[7], buffer[5]);v = G(v, 2, 7,  8, 13, buffer[15], buffer[14]);v = G(v, 3, 4,  9, 14, buffer[1], buffer[9]);
	
	/* i = 6 */	 
	v = G(v, 0, 4,  8, 12, buffer[12], buffer[5]);v = G(v, 1, 5,  9, 13, buffer[1], buffer[15]);v = G(v, 2, 6, 10, 14, buffer[14], buffer[13]);v = G(v, 3, 7, 11, 15, buffer[4], buffer[10]);v = G(v, 0, 5, 10, 15, buffer[0], buffer[7]);v = G(v, 1, 6, 11, 12, buffer[6], buffer[3]);v = G(v, 2, 7,  8, 13, buffer[9], buffer[2]);v = G(v, 3, 4,  9, 14, buffer[8], buffer[11]);

	/* i = 7 */	 
	v = G(v, 0, 4,  8, 12, buffer[13], buffer[11]);v = G(v, 1, 5,  9, 13, buffer[7], buffer[14]);v = G(v, 2, 6, 10, 14, buffer[12], buffer[1]);v = G(v, 3, 7, 11, 15, buffer[3], buffer[9]);v = G(v, 0, 5, 10, 15, buffer[5], buffer[0]);v = G(v, 1, 6, 11, 12, buffer[15], buffer[4]);v = G(v, 2, 7,  8, 13, buffer[8], buffer[6]);v = G(v, 3, 4,  9, 14, buffer[2], buffer[10]);

	/* i = 8 */	 
	v = G(v, 0, 4,  8, 12, buffer[6], buffer[15]);v = G(v, 1, 5,  9, 13, buffer[14], buffer[9]);v = G(v, 2, 6, 10, 14, buffer[11], buffer[3]);v = G(v, 3, 7, 11, 15, buffer[0], buffer[8]);v = G(v, 0, 5, 10, 15, buffer[12], buffer[2]);v = G(v, 1, 6, 11, 12, buffer[13], buffer[7]);v = G(v, 2, 7,  8, 13, buffer[1], buffer[4]);v = G(v, 3, 4,  9, 14, buffer[10], buffer[5]);

	/* i = 9 */	 
	v = G(v, 0, 4,  8, 12, buffer[10], buffer[2]);v = G(v, 1, 5,  9, 13, buffer[8], buffer[4]);v = G(v, 2, 6, 10, 14, buffer[7], buffer[6]);v = G(v, 3, 7, 11, 15, buffer[1], buffer[5]);v = G(v, 0, 5, 10, 15, buffer[15], buffer[11]);v = G(v, 1, 6, 11, 12, buffer[9], buffer[14]);v = G(v, 2, 7,  8, 13, buffer[3], buffer[12]);v = G(v, 3, 4,  9, 14, buffer[13], buffer[0]);

	/* i = 10 */ 
	v = G(v, 0, 4,  8, 12, buffer[0], buffer[1]);v = G(v, 1, 5,  9, 13, buffer[2], buffer[3]);v = G(v, 2, 6, 10, 14, buffer[4], buffer[5]); v = G(v, 3, 7, 11, 15, buffer[6], buffer[7]); v = G(v, 0, 5, 10, 15, buffer[8], buffer[9]); v = G(v, 1, 6, 11, 12, buffer[10], buffer[11]); v = G(v, 2, 7,  8, 13, buffer[12], buffer[13]);	v = G(v, 3, 4,  9, 14, buffer[14], buffer[15]);
	
	/* i = 11 */ 
	v = G(v, 0, 4,  8, 12, buffer[14], buffer[10]);v = G(v, 1, 5,  9, 13, buffer[4], buffer[8]);v = G(v, 2, 6, 10, 14, buffer[9], buffer[15]);v = G(v, 3, 7, 11, 15, buffer[13], buffer[6]);v = G(v, 0, 5, 10, 15, buffer[1], buffer[12]);v = G(v, 1, 6, 11, 12, buffer[0], buffer[2]);v = G(v, 2, 7,  8, 13, buffer[11], buffer[7]);v = G(v, 3, 4,  9, 14, buffer[5], buffer[3]);

	return v;

}

/* NÃO APARENTA PROBLEMA */
inline fn compression(stack u64[16] buffer, stack u64[8] h, stack u64[2] t, inline int last) -> stack u64[8] {
	stack u64[16] v;
	
	reg u64 hi vi vi_plus8;
	
	inline int i;

	v = array_v(h,t,last); // CORRECT
	
	v = compressMix(buffer,v); // CORRECT

	for i = 0 to 8 {
		
		hi = h[i]; 
		vi = v[i]; 
		vi_plus8 = v[i+8];

		hi ^= vi; hi ^= vi_plus8;

		h[i] = hi;
	} //CORRECT

	return h;

}

/* NÃO APARENTA PROBLEMA */
inline fn addFullBlock(reg u64 input) -> stack u64[16] {
	reg u64 i temp;
	stack u64[16] buffer;
	
	i=0;

	while( i < 16) {
		temp = [input + i*8]; 
		buffer[(int) i]= temp;
		i += 1;
	}
	return buffer;  //Full tested and Correct
}


inline fn addLastBlock(reg u64 input inlen) -> stack u64[16] {
	reg u64 i i8 temp counter mask; 
	reg u8 temp_u8;
	stack u64[16] buffer;

	i=0;
	i8 = 8;
	counter = 0;

	while(i8 <= inlen){    //has some u64 left
		temp = [input + 8*i]; 
		buffer[(int)i] = temp;
		i += 1;
		counter += 8; //counts every u64 left
		inlen -= 8;
	}
	
	input += counter; // advance input
	mask = 0;

	while(inlen > 0) { //some u8 left 
		inlen -=1 ;
		mask <<= 8;
		
		temp_u8 = (u8)[input + inlen]; //get u8
		
		temp = (64u)temp_u8;
		
		mask ^= temp;
		
	}

	buffer[(int)i] = mask; //put the last bytes in buffer
	i += 1;
	
	while(i < 16){ // No more bytes left, fill the buffer with 0's;
		buffer[(int)i] = 0x0;
		i += 1;
	}
	
	return buffer;
}

/* for (menssage) input and inputlen */
inline fn update( reg u64 input inlen, stack u64[8] h, stack u64[2] t) -> stack u64[8] {
	stack u64[16] buffer;
	reg u64 sum_t;

	_ = #init_msf();

	while(inlen >= 128) { //blocks multiple of 16
		buffer= addFullBlock(input);
		
		inlen -= 128;
		input += 128;
		
		t[0] += 128; // Add to t[0] the number of bytes read : 16 * 8 bytes [ 8 bytes == 64 bits ] = 128;
		
		if(inlen == 0) { //last block
			h = compression(buffer,h,t,1);		
		}
		else{ //not the last block
			h = compression(buffer,h,t,0);
		}
	}

	if(inlen > 0) { //some remain bytes
		sum_t = inlen;
		buffer = addLastBlock(input, inlen);
		t[0] += sum_t; // Add to t[0] the remaining bytes;
		h  = compression (buffer,h,t,1);
	}
	return h;
}

/* for a key e keylen */
inline fn updateKey( reg u64 key keylen inlen, stack u64[8] h, stack u64[2] t) -> stack u64[8] {
	stack u64[16] buffer;

	/* 155 - 161 */
	while(keylen == 128) { //blocks multiple of 16
		buffer = addFullBlock(key);
		
		keylen -= 128;
		key += 128;
		
		if(inlen == 0) { //last block
			h = compression(buffer,h,t,1); /* blake2b_final */
		}
		else{
			h = compression(buffer,h,t,0); /* blake2b_update */
		}
	}


	if(keylen > 0) { //some remain bytes
		buffer = addLastBlock(key, keylen);
		
		if(inlen == 0){
			h  = compression(buffer,h,t,1);
		}
		else{
			h = compression(buffer,h,t,0);
		}

	}

	return h;
}

inline fn final(reg u64 out outlen, stack u64[8] h) {
	reg u64 x y h_x i;
	
	i = 0;

	_ = #init_msf();

	/* REF: 181 - 184 */
	while(i < outlen) {
		x = i;
		
		x >>= 3;	
		
		y = i; 
		y &= 7; 
		y *= 8;
		
		h_x = h[(int)x];
		h_x >>= y;
		
		h_x &= 0xFF;
		
		[out + i] = h_x;
		
		i+=1;
	}
}


/*  Initialize arrays ** h ** and ** t **  */
// inline fn init(reg u64 outlen keylen, stack u64[64] key) -> stack u64[8], stack u64[2] {
inline fn init(reg u64 outlen keylen key inlen) -> stack u64[8], stack u64[2] {
	inline int i; 

	stack u64[8] h ;
	stack u64[8] iv; 
	stack u64[2] t ; 
		
	reg u64 iv_i h_0 aux keylen_shift_8;

	iv = init_iv();

	for i = 0 to 9 { /* h[i] = iv[i] */
		iv_i = iv[i];
		h[i] = iv_i;
	}

	aux = keylen; keylen_shift_8 = aux << 8;

	h_0 = h[0]; 
	
	h_0 ^= 0x01010000; 
	h_0 ^= keylen_shift_8; 
	h_0 ^= outlen; // h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;
	
	h[0] = h_0;						  

	_ = #init_msf();
	if (keylen > 0 ){ /* REF: 145 - 148 */
		t[0] = 128; t[1] = 0;	
		h = updateKey(key, keylen, inlen, h, t);
	}
	else {
		t[0] = 0; t[1] = 0;
	}
	
	return h ,t;
}


/*-----BLAKE FUNCTIONS-----*/

export fn blake2b(reg u64 in inlen, reg u64 out outlen , reg u64 key keylen) {
	reg u64 outlenCpy;

	stack u64[8] h; stack u64[2] t;

	outlenCpy = outlen;

	h,t = init(outlenCpy, keylen, key, inlen);

	h = update(in, inlen, h, t);

	final(out, outlenCpy, h);
}
